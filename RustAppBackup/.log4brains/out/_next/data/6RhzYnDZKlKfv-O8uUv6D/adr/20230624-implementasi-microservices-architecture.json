{"pageProps":{"projectName":"Rust","currentAdr":{"slug":"20230624-implementasi-microservices-architecture","package":null,"title":"Implementasi Microservices Architecture","status":"proposed","supersededBy":null,"tags":["miroservices","architectures"],"deciders":["Alfa","Anggoro","Edy Salim"],"body":{"enhancedMdx":"\nTechnical Story: -\n\n## Context and Problem Statement\n\nMonolith Architectures yang sebelumnya sudah di implementasi oleh tim IT sekarang saat ini memiliki beberapa kekurangan, diantaranya code akan lebih kompleks dan besar sehingga akan menjadi sulit untuk dipelihara seiring dengan berjalannya waktu, itulah salah satu alasan mengapa perlu merubah konsep arsitektur menjadi arsitektur microservice. Konsep arsitektur monolit juga selalu membutuhkan infrastruktur perangkat yang lebih tinggi untuk melakukan komputasi ketika code aplikasi semakin kompleks dan berat yang akan menjadikan kendala bagi tim infrastruktur juga dalam pemenuhan kebutuhan perangkat keras. Sedangkan, kebutuhan untuk melakukan peningkatkan kebutuhan perangkat keras (scaling up) itu lebih mahal dan lambat jika di bandingkan dengan “horizontal scaling”.\n\n## Decision Drivers\n\n- \n- [driver 1, e.g., a force, facing concern, …]\n- [driver 2, e.g., a force, facing concern, …]\n- … <!-- numbers of drivers can vary -->\n\n## Considered Options\n\n- Microservices Architecture\n\n## Decision Outcome\n\nKekurangan dari arsitektur monolit itulah yang sebagai alasan utama kita perlu merubah ke konsep topologi arsitektur yang terbaru. Arsitektur microservice adalah solusi yang dapat meningkatkan dan memperbaiki kompleksitas yang terjadi dalam arsitektur monolit.\nDalam arsitektur microservice, setiap service hanya akan terhubung ke satu database. Service tidak dapat terhubung ke database-database yang lain. Komunikasi untuk melakukan pembacaan atau update data akan menggunakan protokol API sebagai standar. Diagram gambar 1 di bawah ini merupakan contoh standar penerapan arsitektur microservice.\n\n![Contoh yang baik dalam penerapan-microservices architecture](./good-microservices.png \"Contoh yang baik dalam penerapan-microservices architecture\")\n\n![Contoh yang tidak baik dalam penerapan microservices architecture](./assets/bad-microservices.png?raw=true \"Contoh yang tidak baik dalam penerapan microservices architecture\")\n\n### Positive Consequences\n\n-\tDapat menerapkan konsep praktik pengembangan dan integrasi berkelanjutan.\n-\tDapat menerapkan konsep blue green deployment. \n-\tFleksibel untuk melakukan deploy di server publik atau server pribadi yang menggunakan platform berbeda seperti Windows Server atau Linux.\n-\tIsolasi komunikasi ke database.\n-\tCepat dalam pembuatan dan pengembangan.\n-\tMudah untuk melakukan perubahan dalam services dan tidak akan berdampak ke keseluruhan sistem.\n-\tLebih mudah untuk melakukan memelihara dan merapikan code.\n-\tMudah dan cepat meningkatkan kemampuan dengan horizontal scaling concept.\n-\tDapat dibangun dan integrasi dengan lebih dari satu bahasa pemrograman. \n-\tDapat memitigasi terjadi gangguan pada sebuah service dan service yang lain dapat terus berfungsi.\n-\tLebih mudah untuk melakukan pemeliharaan sistem.\n\n### Negative Consequences\n\n- [e.g., compromising quality attribute, follow-up decisions required, …]\n- …\n\n## Pros and Cons of the Options\n\n### Microservices Architecture\n\n#### Pros\n\n-\tDapat menerapkan konsep praktik pengembangan dan integrasi berkelanjutan.\n-\tDapat menerapkan konsep blue green deployment. \n-\tFleksibel untuk melakukan deploy di server publik atau server pribadi yang menggunakan platform berbeda seperti Windows Server atau Linux.\n-\tIsolasi komunikasi ke database.\n-\tCepat dalam pembuatan dan pengembangan.\n-\tMudah untuk melakukan perubahan dalam services dan tidak akan berdampak ke keseluruhan sistem.\n-\tLebih mudah untuk melakukan memelihara dan merapikan code.\n-\tMudah dan cepat meningkatkan kemampuan dengan horizontal scaling concept.\n-\tDapat dibangun dan integrasi dengan lebih dari satu bahasa pemrograman. \n-\tDapat memitigasi terjadi gangguan pada sebuah service dan service yang lain dapat terus berfungsi.\n-\tLebih mudah untuk melakukan pemeliharaan sistem.\n\n#### Cons\n\n-\tSistem akan menjadi lebih kompleks karena memungkinkan untuk di bangun dengan beberapa jenis bahasa pemrograman yang berbeda.\n-\tKoordinasi dan komunikasi antar service akan menjadi lebih kompleks.\n-\tMembutuhkan lebih banyak resources karena setiap service akan membutuhkan peran untuk menghubungkan ke masing-masing database dan memilihara service dan database jika terjadi gangguan.\n\n### Monolith Architectures\n\n#### Pros\n\n-\tMudah dalam membangun sistem karena arsitektur monolith hanya menggunakan satu jenis bahasa pemrograman sehingga mudah dipelajari dan diadaptasi dalam tim.\n-\tMudah untuk melakukan tes dan menelusuri karena semua tim dapat berkomunikasi dan melakukan pengecekan bersama dalam satu bahasa pemrograman tanpa perlu pengecekan di sisi komunikasi antar service.\n-\tMudah dalam pengembangan karena komponennya lebih sederhana.\n\n#### Cons\n\n-\tSusah untuk merubah fungsi dan pengecekan karena akan berdampak kepada komponen yang lain yang sudah terintegrasi.\n-\tKompleksitas code menjadi lebih sudah dan besar.\n-\tMonolit code susah untuk dirawat, susah untuk membuat code tetap bersih dan rapi.\n-\tMembutuhkan spesifikasi perangkat keras yang lebih tinggi untuk melakukan komputasi lebih besar dalam proses scaling up.\n-\tProses scaling up akan lebih lama.\n\n## Links\n\n- https://www.atlassian.com/microservices/microservices-architecture/microservices-vs-monolith\n- https://www.digitalocean.com/blog/monolithic-vs-microservice-architecture\n- https://azure.microsoft.com/en-gb/products/service-fabric\n- https://www.ibm.com/topics/microservices\n- https://www.atlassian.com/microservices/microservices-architecture\n\n## Notes\n\n- Author: Aditya Kristianto\n- Version: 0.1\n- Changelog:\n    - 0.1: versi pengajuan awal"},"creationDate":"2023-06-24T16:11:50.000Z","lastEditDate":"2023-06-24T16:11:50.000Z","lastEditAuthor":"Aditya Kristianto","publicationDate":"2023-06-24T16:59:59.000Z","file":{"relativePath":"docs/adr/20230624-implementasi-microservices-architecture.md","absolutePath":"/home/kristiantoaditya/rust/docs/adr/20230624-implementasi-microservices-architecture.md"},"repository":{"provider":"github","viewUrl":"https://github.com/aditya-kristianto/rust/blob/master/docs/adr/20230624-implementasi-microservices-architecture.md"}},"l4bVersion":"1.0.1"},"__N_SSG":true}